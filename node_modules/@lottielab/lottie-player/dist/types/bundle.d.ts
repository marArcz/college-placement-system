import React from 'react';
import { AnimationItem } from 'lottie-web/build/player/lottie_lottielab';

type LottieData = any;
interface ILottie {
    play(): void;
    stop(): void;
    pause(): void;
    seek(timeSeconds: number): void;
    seekToFrame(frame: number): void;
    loopBetween(timeSeconds1: number, timeSeconds2: number): void;
    loopBetweenFrames(frame1: number, frame2: number): void;
    playing: boolean;
    loop: boolean | number;
    currentTime: number;
    currentFrame: number;
    frameRate: number;
    duration: number;
    durationFrames: number;
    direction: 1 | -1;
    speed: number;
    animation: AnimationItem | undefined;
    animationData: LottieData | undefined;
}

interface LottiePropsBase {
    autoplay?: boolean;
    loop?: boolean;
    speed?: number;
    direction?: 1 | -1;
    className?: string;
    style?: React.CSSProperties;
}
type LottieProps = LottiePropsBase & ({
    src: string;
} | {
    lottie: object;
});
declare const LottieReact: React.ForwardRefExoticComponent<LottieProps & React.RefAttributes<ILottie>>;

declare class LottieWeb extends HTMLElement implements ILottie {
    private lottie;
    static get observedAttributes(): string[];
    constructor();
    private updateStyles;
    private get intrinsicSize();
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * Converts the loop attribute (which can either be null or a string) to either a boolean or a number.
     * When `loop` is true/false it sets whether the animation should loop indefinitely or not.
     * When `loop` is a number, this sets the number of loops the animation should run for.
     * @param loopAttribute - parameter taken from the component's attributes (string | null)
     * @returns boolean | number
     */
    private convertLoopAttribute;
    /**
     * Converts the direction attribute (which can either be null or a string) to a number.
     * The direction dictates the play direction of the animation.
     * A value of `1` represents an animation playing forwards (and is default).
     * A value of `-1` represents an animation playing backwards.
     */
    private convertDirectionAttribute;
    disconnectedCallback(): void;
    play(): void;
    stop(): void;
    pause(): void;
    seek(timeSeconds: number): void;
    seekToFrame(frame: number): void;
    loopBetween(timeSeconds1: number, timeSeconds2: number): void;
    loopBetweenFrames(frame1: number, frame2: number): void;
    get playing(): boolean;
    set playing(play: boolean);
    get loop(): boolean | number;
    set loop(loop: boolean | number);
    get currentTime(): number;
    set currentTime(time: number);
    get currentFrame(): number;
    set currentFrame(frame: number);
    get frameRate(): number;
    get duration(): number;
    get durationFrames(): number;
    get direction(): 1 | -1;
    set direction(direction: 1 | -1);
    get speed(): number;
    set speed(speed: number);
    get animation(): AnimationItem;
    get animationData(): LottieData | undefined;
}

export { type ILottie, LottieReact, LottieWeb };
